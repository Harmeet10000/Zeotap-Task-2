
```
Documentation for Charts Component

This component provides visualizations for weather trends and alerts using Chart.js. It displays line charts for temperature trends and a bar chart for alert counts by city.

Overview
--------
- **Line Charts**: Show temperature trends (average, min, max) for selected cities.
- **Bar Chart**: Displays alert counts for each city.
- **Data Handling**: Retrieves weather summaries and alerts from localStorage.

Components and Libraries Used
-----------------------------
1. **React Hooks**:
   - `useState`: Manages the component's state for weather summaries and alerts.
   - `useEffect`: Fetches data from localStorage on component mount.

2. **Chart.js and react-chartjs-2**:
   - Used for rendering line and bar charts.

Data Management
---------------
1. **Weather Summaries**:
   - Retrieves weather summaries from localStorage.
   - Takes the last 90 entries (6 cities Ã— 15 entries) for visualization.

2. **Alerts**:
   - Retrieves alert data from the user token stored in localStorage.
   - Groups alerts by city and sums the counts for the bar chart.

Key Functions
-------------
1. **getColor(city)**:
   - Assigns a unique color to each city.
   - Example: Delhi is assigned `#FF6384`, Mumbai `#36A2EB`.

2. **generateLineChartData(type)**:
   - Creates datasets for the line charts.
   - Example usage:
     ```javascript
     generateLineChartData("tempAvg");
     ```
   - Ensures only 15 data points per city are used for visualization.

3. **Bar Chart Data Preparation**:
   - Groups alerts by city and sums their counts:
     ```javascript
     const groupedAlerts = alerts.reduce((acc, alert) => {
       if (acc[alert.cities]) {
         acc[alert.cities] += alert.count;
       } else {
         acc[alert.cities] = alert.count;
       }
       return acc;
     }, {});
     ```

UI Rendering
------------
1. **Line Charts**:
   - Displays trends for average, minimum, and maximum temperatures.
   - Example:
     ```javascript
     <Line data={generateLineChartData("tempAvg")} />
     ```

2. **Bar Chart**:
   - Shows alert counts for each city.
   - Example:
     ```javascript
     <Bar data={barChartData} />
     ```

3. **Conditional Rendering**:
   - If no weather data is available:
     ```javascript
     return <p className="text-center text-xl">Not enough data for charts</p>;
     ```

Performance Optimizations
-------------------------
1. **State Management**:
   - Uses `useState` to store weather summaries and alerts locally, minimizing re-renders.

2. **Efficient Data Retrieval**:
   - Only the latest 90 entries are used to keep the visualizations relevant and reduce performance overhead.

Error Handling
--------------
- If no data is available, a message is displayed instead of the charts:
  ```javascript
  if (weatherSummaries.length === 0) {
    return <p className="text-center text-xl">Not enough data for charts</p>;
  }
  ```

How to Use
----------
1. **Install Dependencies**:
   ```bash
   npm install chart.js react-chartjs-2
   ```

2. **Import the Component**:
   ```javascript
   import Charts from "./Charts";
   ```

3. **Usage in Parent Component**:
   - Include the `Charts` component to render the charts.
     ```javascript
     <Charts />
     ```

4. **Ensure Data Availability**:
   - Make sure that weather summaries and alerts are stored in localStorage before rendering the charts.

Visual Elements
---------------
- **Line Chart**: Shows temperature trends for cities.
- **Bar Chart**: Displays alert counts grouped by city.
- **Color Coding**: Ensures consistency in data visualization by assigning specific colors to cities.

This documentation provides a comprehensive guide to the Charts component, explaining how data is managed and visualized.
```

---

